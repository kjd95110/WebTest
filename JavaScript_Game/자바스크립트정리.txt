
출처:https://bblog.tistory.com/300

.forEach
forEach는 가장 기본적인 Loop 메소드입니다.

간단한 예제(배열의 짝수만 출력하는 프로그램)를 통해서 for 구문과 비교해 봅시다.

// for 구문 버전
var arr = [3, 9, 4, 2, 7, 6];
for (var i = 0; i < arr.length; i++) {
    if (arr[i] % 2 == 0) {
        console.log(arr[i]);
    }
}
// forEach() 버전
var arr = [3, 9, 4, 2, 7, 6];
arr.forEach(function (n) {
    if (n % 2 == 0) {
        console.log(n);
    }
});
코드 라인의 수는 같습니다. 하지만 for 구문과는 다른 점을 알겠나요?

스코프를 더럽히지 않는다.

for 구문은 배열의 인덱스를 저장하기 위한 임시 변수 i를 할당했습니다. 사실 이 프로그램은 아주 작아서 임시 변수 할당하는 것은 큰 문제가 안됩니다. 그러나 시스템이 커지고 유지보수를 해야 한다면 언제 사용한지 모르는 i 때문에 가독성이 떨어지게 됩니다.
요소 접근 방법 arr[i] vs n

forEach의 콜백 함수의 첫 번째 인자로 각 요소의 값이 들어옵니다. 덕분에 우리는 깔끔한 방법으로 각 요소의 값을 얻을 수 있습니다.


.map
지금부터 다양한 기능을 제공하는 메소들을 살펴봅시다.

map 메소드는 요소를 일괄적으로 변경하는데 효과적입니다. 예제를 봅시다.

// 문자열 배열에서 문자열 길이만 획득하기
var arr = ['foo', 'hello', 'diamond', 'A'];
var arr2 = arr.map(function (str) {
    return str.length;
});
console.log(arr2); // [3, 5, 7, 1]
arr에는 문자열만 arr2에는 문자열의 길이만 담겼습니다.

map은 콜백 함수의 리턴을 모아서 새로운 배열을 만드는 것이 목적입니다.

위의 예제에서는 str.length 문자열 길이만 반환했기 때문에 arr2에는 문자열 길이로 이루어진 새로운 배열이 담겼습니다.

forEach로는 구현할 수 없을까요? forEach가 map의 완벽한 상위호환이 되지는 않을까요? 그렇지 않습니다. 우리가 for 구문 대신 forEach를 사용해야 하는 것처럼 forEach 대신 map을 반드시 구분해서 사용해야 하는 이유가 있습니다.



.filter
filter 메소드는 이름 그대로 요소들을 걸러내는 것이 목적입니다. 예제를 봅시다.

// 정수 배열에서 5의 배수인 정수만 모으기
var arr = [4, 15, 377, 395, 400, 1024, 3000];
var arr2 = arr.filter(function (n) {
    return n % 5 == 0;
});
console.log(arr2); // [15, 395, 400, 3000]
콜백 함수의 리턴은 boolean을 가집니다. 리턴이 true인 요소만 모아서 새로운 배열을 만듭니다. 생략하면? 리턴은 undefined이므로 false가 됩니다.

만족하는 요소가 없다면? 빈 배열이 반환됩니다.

var arr = [4, 377, 1024];
var arr2 = arr.filter(function (n) {
    return n % 5 == 0;
});
console.log(arr2); // []
undefined도 아닌 빈 배열을 반환하는 것은 매우 큰 의미를 가집니다. 보통 도메인을 해결하기 위해서 Array 메소드를 여러개 연결하여 사용하는데 빈 배열이라도 반환 함으로써 중간에 오류가 나지 않고 다음 Array 메소드를 사용할 수 있습니다.

// 5의 배수만 구해서 각 요소를 2배
var arr = [4, 15, 377, 395, 400, 1024, 3000];
var arr2 = arr.filter(function (n) {
    return n % 5 == 0;
}).map(function (n) {
    return n * 2;
});
console.log(arr2); // [30, 790, 800, 6000]


.find
find 메소드는 filter와 비슷하지만 단 하나의 요소만 리턴합니다. 예제를 볼까요?

// 정수 배열에서 5의 배수인 정수 '하나' 찾기
var arr = [4, 15, 377, 395, 400, 1024, 3000];
var arr2 = arr.find(function (n) {
    return n % 5 == 0;
});
console.log(arr2); // 15
그러면 콜백 함수는 몇 번 호출 될까요? 요소의 갯수인 7번?

// 정수 배열에서 5의 배수인 정수만 모으기
var arr = [4, 15, 377, 395, 400, 1024, 3000];
var count = 0;
var arr2 = arr.find(function (n) {
    count++;
    return n % 5 == 0;
});
console.log(count); // 2
정답은 2번 입니다. 첫 번째는 4에 대해서, 두 번째는 15에 대해서 호출하겠죠?

즉, find는 콜백 함수의 리턴이 true인 요소를 찾을 떄 까지 순회하다가 찾으면 거기서 끝납니다. 만약 발견하지 못하면? undefined가 반환됩니다.

// 정수 배열에서 5의 배수인 정수만 모으기
var arr = [4,  377, 1024];
var arr2 = arr.find(function (n) {
    return n % 5 == 0;
});
console.log(arr2); // undefined
filter는 찾지 못하면 빈 배열을 반환했습니다. 그런데 find는 undefined라고요? 
그러면 함수를 연결하여 사용할 수 없는 거 아닌가요? 조금만 생각해보면 find는 빈 배열을 반환할 필요가 없음을 알 수 있습니다. 
정상적으로 반환하더라도 이미 배열이 아니기 떄문입니다. 따라서 find의 반환은 항상 배열이 아니기 때문에 어차피 다른 Array 메소드와 연결하여 사용할 일이 없습니다.

.reduce
reduce 메소드는 위에서 나온 메소드를 모두 대체할 수 있는 아주 유연한 메소드입니다. map, filter, find로 구현할 수 있는 문제라면 reduce로도 구현할 수 있습니다. 
하지만 상황에 따라 적절한 메소드를 사용하는 것이 가독성 측면에서 더 유리하겠죠?

먼저 reduce의 사용 방법을 봅시다. 조금 특이합니다.

arr.reduce(callback[, initialValue])

callback
previousValue: 이전 마지막 콜백 호출에서 반환된 값 또는 공급된 경우 initialValue.
currentValue: 배열 내 현재 처리되고 있는 요소(element).
currentIndex: 배열 내 현재 처리되고 있는 요소의 인덱스.
array: reduce에 호출되는 배열.
initialValue: 선택사항. callback의 첫 호출에 첫 번째 인수로 사용하는 값.
참조: https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

다른 메소드와는 다르게 콜백 함수와 initialValue라는 두 번째 인자를 넣을 수 있습니다. 
또 reduce의 리턴이 중요한데 배열이 될 수도 요소 하나의 값이 될 수도 사용자가 원하는 값 뭐든지될 수 있습니다. 예제를 봐야겠죠?

// 배열 요소의 합 계산하기
var arr = [9, 2, 8, 5, 7];
var sum = arr.reduce(function (pre, value) {
    return pre + value;
});
console.log(sum); // 31





팩토리패턴과 프로토타입

var card={
name:'제로초';
att:5,
hp:10,
type:'카드',
attack: function(){
console.log('공격!!!');
},
defend: function(){
 console.log(방어!!!');
},
};

var card2={
name:'무지';
att:1,
hp:3,
type:'카드',
attack: function(){
console.log('공격!!!');
},
defend: function(){
 console.log(방어!!!');
},
};

var card3={
name:'제로초';
att:3,
hp:2,
type:'토끼',
attack: function(){
console.log('공격!!!');
},
defend: function(){
 console.log(방어!!!');
},
};


var card4={
name:'제로초';
att:5,
hp:3,
type:'토끼',
attack: function(){
console.log('공격!!!');
},
defend: function(){
 console.log(방어!!!');
},
};

*************팩토리 패턴*******************************

function 카드공장(name,att,hp){
return{
name:name,
att:att,
hp:hp,
type:'카드',
attact: function(){},
defind: function(){},
};
}

var card=카드공장('제로초',10,10);
var card2= 카드공장('무지',1,2);


**************** 프로토타입 중복제거 ********************************

var prototype3={
   type:'카드',
   attacck: function(){},
   defind: function(){},
}

var card={
   name:'제로초',
   att,10,
   hp:10,
}

__proto__           ===> console.log의 이놈의 정체는????

card.__proto__ =prototype3

접근법
card.__proto__.type

card.__proto__.__proto__.toString()

__proto__ 는 생략이 가능함,  이유: 속성을 찾을때 2단계에서 찾아서 읽어옴.
 
고로
card.type;
card.toString() 으로 사용 가능함.



**********************************************************************
var 프로토타입 = {
     type:'카드',
     attack: function() { } ,
     defend: function() { },
};

function 카드공장(name,att,hp){
var 카드={
    name:name,
att:att,
hp:hp,
}
카드.__proto__ = 프로토타입   ---->>>>> *************** 참조 ***************
return 카드;
}


카드공장('제로초',50,30);

***********************************************************************
var card1= 카드공장('제로초');
var card2= 카드공장('무지');
var card3= 카드공장('토끼');
...

var card30000= 카드공장('졸려');


미치는거죠...ㅋㅋㅋ

card1.att=30
card2.att=30
card30000.att=30


미치는 거죠???

card1.type -> '카드'
card2.type -> '카드'
card3.type -> '카드'
card4.type -> '카드'
card30000.type -> '카드'
됩니다.


카드.__proto__ = 프로토타입 ; 

 에서
프로토타입.type => '카드' 인데

프로토타입.type= '장난감';

한줄로 30000만줄 모두 

card1~ card30000 모두 '장난감'으로 바뀐다.



추가 해달로 요청
width, height 길이 추가요청

프로토타입.width=100;
프로토타입.height=300;

2줄로 해결(6만번할것을)

근데 실무에서 __proto__ 를 사용하면 안된다????
공신력있는 MDN web site에가서 보면...비표준이란다....아낙...
근데 크롬은 잘 지원한덴다....아낙....

var 프로토타입={
type:'카드',
attack:function(){},
defend: function() {},
};

function 카드공장(name,att,hp){
var 카드= object.create(프로토타입);
 카드.name= name;
카드.att=att;
카드.hp=hp;
 return 카드;
}


Object.assign({}, Object.create(프로토타입)); 

위의 내용은

  object.keys(obj).forEach(function(key)){
           obj2[key]=obj[key];
       });  --> 일단계복사

이내용을 줄인것이다.




***************************************************************************************

자바스크립트 는  콜바이레퍼런스 가 아니다???? 없다....
function 함수(매개변수){
    매개변수 = 8;
    console.log(매개변수);
}

var 인자={a : 5} ;

함수(인자);
 console.log(인자);


결과는 ? 매개변수 => 8
         인자=> a:5

         이유는 함수내에서 매개변수 자체를 바꿨기 때문에  -> Call by Value (참조관계가 깨짐) 콜바이 쉐어링(sharing)....정식용어가 아니므로 콜바이 밸류로 ....
         함수내에서 매개변수 속성을 바꾼다면... 참조관계유지



function 함수(매개변수){
    매개변수.a = 10;
    console.log(매개변수);
}

var 인자={a : 5} ;

함수(인자);
 console.log(인자);

   함수내에서 매개변수 속성을 바꾼다면... 참조관계유지됨.
 
 *****************************************************************************************






var prototype={
    type:'카드',
}

function 카드공장(name,att,hp){
    var card=Object.create(prototype);
    card.name=name;
    card.att=att;
    card.hp=hp;
    return card;
}


// ****************** prototype형식의 패턴 *****************************************************

Card.prototype= prototype;

//*******************생성자(객체) 패턴***************************************************************** */


function Card(name,att,hp){
    this.name=name;
    this.att=att;
    this.hp=hp;
}



//Card('제로초',5,10);// 이렇게 하면 큰 의미가 없다.생성자입장에서

new Card('제로초',5,10); //객체로 생성(메모리 할당)되면서 첫문자 대문자 불문율....


var 제로초=new Card('제로초',5,10); 

var 무지= new Card('무지',1,2);


console.log('찍으면');
//Card { name,"제로초",att:5, hp:10 }

객체앞에 Card 라는 이름이 있다는것을 알수있다.
//********************************************************************************************************* */


var prototype={type:'카드'}
function Card(name,att,hp){
    "use strict"  /// Card 함수만 엄격모드 로 바뀐다.
    this.name=name;
    this.att=att;
    this.hp=hp;
}

Card.prototype= prototype;

var 제로초=Card('제로초',5,10); //new 가 빠져있다.

// this -> undefined 가된다. 엄격모드일때...
//일반적으로 this => ( window )가 됨의 유의한다.



//"use strict"  /// 전체가 엄격모드 로 바뀐다. "use strick" 문구 아래에 있는것들은 모두 적용된다고 보면 된다.
var prototype={type:'카드'}
function Card(name,att,hp){    
    this.name=name;
    this.att=att;
    this.hp=hp;
}

Card.prototype= prototype;


//*********************************************************************************************** */

var prototype={type:'카드'}
function Card(name,att,hp){    
    this.name=name;
    this.att=att;
    this.hp=hp;
}

Card.prototype= prototype;

var 제로초= new Card('제로초',5,10); //new 가 있다.


//this는 제로초 자체가 된다.

//******************************************************************************************************


Math.floor() : 소수점 이하를 버림한다.
Math.ceil() : 소수점 이하를 올림한다.
Math.round() : 소수점 이하를 반올림한다.


자바 스크립트 개념 잡기 순서

함수, 객체 이해하기

비동기라는 개념-이벤트 드리븐 프로그래밍
콜백,프로미스,async/await

호출스택,이벤트루프, **실행 컨텍스트**

프로토타입기반 (자바-(class기반)랑 가장 큰 차이점) 
자바스크립트에서 class 는 class가 아니다? 프로토타입이다.의 의미를 이해할것.

DOM 외우지말것, 쓰다보면 외워진다.

디자인패턴-> 코딩하다면 코드 정리 하다보면 알아서 디자인패턴 모양이 돼요...
외워서 하는게 아니라 코딩하다면 알아서 코딩패턴이 되니까....관련된 책 한번읽어보고 넘어갈것.
함수형 프로그래밍->선택
map,filter,reduce->필수
배열-> 객체의 일종 -> 이차원배열 때 중요한데 map,filter,reduce 가 또 여기서 중요해진다.


********************************************************************************************
콜백함수의 의미
나중에 실행하는 코드
인자,아규먼트로 넘기거나,변수에 함수를 넣기도하고, 일급객체
setTimeout(function() {

},1000);

첫번째 인자 ,함수
두번째 인자 1000

동기적콜백
비동기적콜백

*** 일반함수(fakeSetTimeout) ****
function fakeSetTimeout(callback,delay){
	callback();
}
console.log(0);
fakeSetTimeout(functon(){
console.log('hello');
}, 0);
console.log(1);

result: 0 
         'hello'
         1
동기적으로 실행됨..

*** 진짜 setTimeout ***

console.log(0);
setTimeout(functon(){
console.log('hello');
}, 0);
console.log(1);
result:
	0
	1
	'hello'

비동기적으로 실행됨




***************************[컨테이닝 블럭 Containning Block]*************************************
컨테이닝 블럭이란  자식기준으로 부모가 누구인가를 결정하는것.

블럭포매팅 컨텍스트(Block formatting context) -블럭서식문맥은
부모입장(기준)에서 누구까지 자식으로  포함해야하나?? 그런것을 결정하는것이라고 보면 된다.

찾는 연습 많이 할것.
찾는 연습많이 할것

CSS 컨테이닝 블록 이란?
기본 Position은 static이다.
CSS 의 absolute fix relateve 에서 

1. Position 속성이 static 이나 relative 이면 컨테이팅 블럭은 자기자신의 콘텐츠 영역입니다.
2.absolute의 경우 컨테이닝 block 을 따라 가기때문에 relative,fixed 해주면 컨테이닝 Block 으로 지정된다. 대개
relative로 컨테이닝 block을 만든다. (static 이 아닌 fixed,absolute,relative,sticky 모두 컨테이닝 블럭을 만듦.) 
단순희 감싸고 있다고 해서  컨테이닝 block이 아닌것에 주의할것.
여기서 부모요소에 position:relative를 많이 쓰는데 그이유는 부모요소에 position:absolute를 줘버리면 부모가 또 유령?이되어 날아가버려서

부모가 또 부모를 찾는 현상이 생길수 있으므로 결국 부모가 html에 까지 가는 상황이 생겨버리므로 부모가 가만히 있으면서 자식을 움직일수 있는방법인

position:relateve를 많이 쓸수 밖에 없겠지요...

3. fixed 도  컨테이닝 블럭은 대개 (뷰포트) 이거나 페이지로 나뉘는 매체에서는 페이지 영역입니다.

4.position 속성이 absolute 나 fixed인경우  다음조건중 하나를 만족하는 가장가까운 조상의 내부여백 영역이 컨테이닝 블럭이 될수있다.
<1> transform 이나 perspective 속성이 아님
<2>will-change 속성이 transform 이나 perspective 임.
<3> filter속성이 none 임
<4> contain속성이 paint 임

body{
     background:beige;
}
p{
	width:50%;
	height:25%;
	margin:5%;
	padding:5%;
	background:cyan;
}
일때 
부모의 폭 50% 이므로 이때 부모는 컨테이닝 블럭을 의미하므로

section{
	display:block;
	width:400px;
	height:160px;
	background:lightgray;
	position: static<기본값>

}

부모 400px 50% 이므로 200px
height 25% 는 40px
margin:5% 400px * 5% =20px
padding:5% 400px * 5%=20px

position: static 이기 때문에..


<다른예제>
body{
     background:beige;
}

일때 
부모의 폭 50% 이므로 이때 부모는 컨테이닝 블럭을 의미하므로

section{
	display:inline;	
	background:lightgray;
	position: static<기본값>

}
p{
	width:50%;
	height:200px; /* 참고: 백분율값이었으면 0*/	
	background:cyan;
}

display:inline은 block자체가 될수가 없으므로

body가 컨테이닝 블럭이 될수있고 그렇다면 
p는 body폭의 50% 가 될것이다.

CSS 우선순위
기본적으로 뒤에 나오는 CSS가 우선순위가 높다.
!important> inline style attribute > id > Class or attribute > tag element 
우선순위가 같다면 개수가 많은 CSS블럭이 우선순위가 높다.
ID 금메달 클래스속성 은메달 태그 동메달
은메달이 아무리 많아도 금메달 못이긴다. 한국식 적용
동메달끼리는 동메달많은 순...뭐..이런식...ㅋ


************블럭포매팅 컨텍스트(Block formatting context) -블럭서식문맥 *****************
컨테이닝 블럭이 자식기준으로 부모가 누구인가를 결정하는것이였다면
부모입장(기준)에서 누구까지 자식으로  포함해야하나?? 그런것을 결정하는것이라고 보면 된다.
1.display:block 일때는 안생기고 display:inline-block일때 생성된다.
2.overflow가 visible 이 아닌요소에 생긴다. (auto,hidden...기타는 부모로서 역할을 다할수 있다. 자식을 감싸줄수 있다.)

****3.float(float 이 none) 이 아닌 요소에 생긴다. **** 
-> float:left or right 해버리면 이놈은 부모가  자식으로 감싸줄수 없으므르(블럭서식문맥에서 벗어나므로) 
해결하는 방법은 overflow:auto 나 none 등등의 방법으로 자식으로 감싸줄수 있도록 해준다.

4.절대위치로 지정된 요소:position:absolute or fixed
그외
5.루트 또는 이를 포함하는 요소
6.display:table-cell 인 요소
7.flex box(display:flex 또는 inline-flex)에 발생



************쌓임 맥락(stacking context)  *****************
쌓임 맥락은 다음 엘리먼트들에 의해 만들어진다. 

html 뿌리 엘리먼트
position 속성이 지정되고(absolute든 relative든 상관없이) z-index 속성이 auto 이외의 값을 가지는 엘리먼트들
z-index값이 auto가 아닌 다른 값을 가진 flex 요소
투명도가 1보다 적게 지정된 엘리먼트들(opacity) (투명도 명세를 보라)
모바일 웹킷과 크롬 22이상에서는 z-index가 auto여도 position: fixed 이면 항상 새로운 쌓임 맥락이 만들어진다.(이 내용을 보라)
쌓임 맥락 안에서는 자식 엘리먼트들이 이전 예제에서 설명된 규칙들에 의해 쌓인다. 자식 엘리먼트들의 z-index 속성 값은 오로지 부모안에서만 의미를 가진다. 
쌓임 맥락은 부모 엘리먼트의 쌓임 맥락을 구성하는 하나의 단위이다. 

요약하자면 

position 속성 값을 지정하고 z-index 속성 값을 지정한 엘리먼트는 쌓임 맥락을 만든다(1이 아닌 투명도를 지정하거나)
쌓임 맥락은 다른 쌓임 맥락 안에 포함될 수 있다. 따라서 쌓임 맥락들이 모여서 계층 구조를 이룬다. 
부모 쌓임 맥락들은 자손 쌓임 맥락과는 완전히 독립되어있다. 오로지 자손 쌓임 맥락만이 부모 쌓임 맥락의 영향을 받는다. 
일단 자식 쌓임 맥락들이 그들의 순서대로 쌓이고 나면 전체는 부모의 쌓임 순서를 따른다. 






*****마진 상쇄 정복(Margin Collapsing )*****

블록의 top 및 bottom 마진은 때로는 (결합되는 마진 중 크기가) 가장 큰 한 마진으로 결합(combine, 상쇄(collapsed))됩니다, 마진 상쇄(margin collapsing)로 알려진 행동.

이렇게 만든이유:  이유는 모르겠고...불편하다

1.인접 형제요소 -형제간에 마진이 있는경우
-> 작은마진이 큰마진속으로 흡수되버린다.


2.부모 및 맡이/막내요소 - FirstChild,LastChild에 마진 Collapsing 있을수 있다.
부모를 뚫고? 나가버린다.

3.빈블록
빈블록이 형제적으로 있는경우 
서로의 경계를 넘어버린다.

이세가지를 극복하는 방법이 부모를 블럭서식문맥 으로 만들어 자식을 감싼다.overflow:auto or overlfow:hidden 뭐 이런씩인데
이방법보다는 float:left 쓰고 width:100%를 주는 방법도 있다.
또한 position:absolute 방법도있다.

***가장확실한 3가지를해결하는 방법:****
display:inline-block
width:100%

inline-block 을 사용시 홀로 사용할때와 연속적으로 사용할때를 잘 이해해야 한다.
특히 inline의 속성-글자방식의 특징- 가로세로block요소를 줄수없다. 등등의 기초 속성을 이해할것.

inline-block을 연속적으로 사용할때가 문제가 되는경우가 많은데 옆으로 나란히 사용할때는 float을 사용하여 해결하고
세로로 사용될때는 vertical-align:top; 이나 float를 줘서 해결해야 한다.

여기서 float:left 줬을때 BFC (블럭서식문맥) 현상이생겨 부모의 부모를 찾아 헤메는 경우가 생길수 있고 body나 html까지 올라가버릴수 있으므로
부모요소를 부모가 될수있게끔 overflow:auto 나 none 으로(visible만 아니면됨.)..또는 
position:absolute해서 부모를 뚫고 나가버리면 부모요소에 position:relateve 같은 속성을 줘서 BFC 되는 것을 막을수 있다.



깊은복사 얕은 복사란

array 또는 객체를 할당할때 call by value가 아닌 call by reference형식으로 복사되기때문에
단순 할당했다하더라도  할당받은 녀석이 다른곳에서 사용되어 변화하게 되면 
원본의 array나 객체가 영향을 받아 원본 훼손?이 되는 현상인데
이때 원본훼손이 안되게 array.slice() 나 JSON형태로 변환 해서 할당하면
원본훼손이 이루어 지지않는데 이를 깊은복사라 한다.
반대로 얕은 복사는 깊은복사와 반대로 원본객체와 같은 주소?를 사용하기때문에 다른곳에서
변화를 시도하게되면 원본도 같이 변화하게 되는것을 얕은복사라 한다. 


